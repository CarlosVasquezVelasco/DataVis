{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/CarlosVasquezVelasco/DataVis/blob/main/HBC%20Research%20Marist%202022\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Yqx5WmndYFPc",
        "outputId": "de1f49b9-b253-4196-b16f-e229110ccc07"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: nest_asyncio in /usr/local/lib/python3.10/dist-packages (1.5.6)\n",
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: yfinance in /usr/local/lib/python3.10/dist-packages (0.2.18)\n",
            "Collecting yfinance\n",
            "  Downloading yfinance-0.2.20-py2.py3-none-any.whl (62 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.5/62.5 kB\u001b[0m \u001b[31m6.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: pandas>=1.3.0 in /usr/local/lib/python3.10/dist-packages (from yfinance) (1.5.3)\n",
            "Requirement already satisfied: numpy>=1.16.5 in /usr/local/lib/python3.10/dist-packages (from yfinance) (1.22.4)\n",
            "Requirement already satisfied: requests>=2.26 in /usr/local/lib/python3.10/dist-packages (from yfinance) (2.27.1)\n",
            "Requirement already satisfied: multitasking>=0.0.7 in /usr/local/lib/python3.10/dist-packages (from yfinance) (0.0.11)\n",
            "Requirement already satisfied: lxml>=4.9.1 in /usr/local/lib/python3.10/dist-packages (from yfinance) (4.9.2)\n",
            "Requirement already satisfied: appdirs>=1.4.4 in /usr/local/lib/python3.10/dist-packages (from yfinance) (1.4.4)\n",
            "Requirement already satisfied: pytz>=2022.5 in /usr/local/lib/python3.10/dist-packages (from yfinance) (2022.7.1)\n",
            "Requirement already satisfied: frozendict>=2.3.4 in /usr/local/lib/python3.10/dist-packages (from yfinance) (2.3.7)\n",
            "Requirement already satisfied: cryptography>=3.3.2 in /usr/local/lib/python3.10/dist-packages (from yfinance) (40.0.2)\n",
            "Requirement already satisfied: beautifulsoup4>=4.11.1 in /usr/local/lib/python3.10/dist-packages (from yfinance) (4.11.2)\n",
            "Requirement already satisfied: html5lib>=1.1 in /usr/local/lib/python3.10/dist-packages (from yfinance) (1.1)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.10/dist-packages (from beautifulsoup4>=4.11.1->yfinance) (2.4.1)\n",
            "Requirement already satisfied: cffi>=1.12 in /usr/local/lib/python3.10/dist-packages (from cryptography>=3.3.2->yfinance) (1.15.1)\n",
            "Requirement already satisfied: six>=1.9 in /usr/local/lib/python3.10/dist-packages (from html5lib>=1.1->yfinance) (1.16.0)\n",
            "Requirement already satisfied: webencodings in /usr/local/lib/python3.10/dist-packages (from html5lib>=1.1->yfinance) (0.5.1)\n",
            "Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.3.0->yfinance) (2.8.2)\n",
            "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests>=2.26->yfinance) (1.26.15)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.26->yfinance) (2022.12.7)\n",
            "Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.10/dist-packages (from requests>=2.26->yfinance) (2.0.12)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.26->yfinance) (3.4)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.10/dist-packages (from cffi>=1.12->cryptography>=3.3.2->yfinance) (2.21)\n",
            "Installing collected packages: yfinance\n",
            "  Attempting uninstall: yfinance\n",
            "    Found existing installation: yfinance 0.2.18\n",
            "    Uninstalling yfinance-0.2.18:\n",
            "      Successfully uninstalled yfinance-0.2.18\n",
            "Successfully installed yfinance-0.2.20\n",
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (1.5.3)\n",
            "Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2022.7.1)\n",
            "Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.22.4)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.1->pandas) (1.16.0)\n",
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting bs4\n",
            "  Downloading bs4-0.0.1.tar.gz (1.1 kB)\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.10/dist-packages (from bs4) (4.11.2)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.10/dist-packages (from beautifulsoup4->bs4) (2.4.1)\n",
            "Building wheels for collected packages: bs4\n",
            "  Building wheel for bs4 (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for bs4: filename=bs4-0.0.1-py3-none-any.whl size=1257 sha256=13dfe01175af8ce77262428a640caa59beddf60ef9a26488ee95de86e7e00630\n",
            "  Stored in directory: /root/.cache/pip/wheels/25/42/45/b773edc52acb16cd2db4cf1a0b47117e2f69bb4eb300ed0e70\n",
            "Successfully built bs4\n",
            "Installing collected packages: bs4\n",
            "Successfully installed bs4-0.0.1\n",
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (2.27.1)\n",
            "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests) (1.26.15)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests) (2022.12.7)\n",
            "Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.10/dist-packages (from requests) (2.0.12)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests) (3.4)\n",
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting selenium\n",
            "  Downloading selenium-4.10.0-py3-none-any.whl (6.7 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.7/6.7 MB\u001b[0m \u001b[31m58.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: urllib3[socks]<3,>=1.26 in /usr/local/lib/python3.10/dist-packages (from selenium) (1.26.15)\n",
            "Collecting trio~=0.17 (from selenium)\n",
            "  Downloading trio-0.22.0-py3-none-any.whl (384 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m384.9/384.9 kB\u001b[0m \u001b[31m36.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting trio-websocket~=0.9 (from selenium)\n",
            "  Downloading trio_websocket-0.10.3-py3-none-any.whl (17 kB)\n",
            "Requirement already satisfied: certifi>=2021.10.8 in /usr/local/lib/python3.10/dist-packages (from selenium) (2022.12.7)\n",
            "Requirement already satisfied: attrs>=19.2.0 in /usr/local/lib/python3.10/dist-packages (from trio~=0.17->selenium) (23.1.0)\n",
            "Requirement already satisfied: sortedcontainers in /usr/local/lib/python3.10/dist-packages (from trio~=0.17->selenium) (2.4.0)\n",
            "Collecting async-generator>=1.9 (from trio~=0.17->selenium)\n",
            "  Downloading async_generator-1.10-py3-none-any.whl (18 kB)\n",
            "Requirement already satisfied: idna in /usr/local/lib/python3.10/dist-packages (from trio~=0.17->selenium) (3.4)\n",
            "Collecting outcome (from trio~=0.17->selenium)\n",
            "  Downloading outcome-1.2.0-py2.py3-none-any.whl (9.7 kB)\n",
            "Requirement already satisfied: sniffio in /usr/local/lib/python3.10/dist-packages (from trio~=0.17->selenium) (1.3.0)\n",
            "Requirement already satisfied: exceptiongroup>=1.0.0rc9 in /usr/local/lib/python3.10/dist-packages (from trio~=0.17->selenium) (1.1.1)\n",
            "Collecting wsproto>=0.14 (from trio-websocket~=0.9->selenium)\n",
            "  Downloading wsproto-1.2.0-py3-none-any.whl (24 kB)\n",
            "Requirement already satisfied: PySocks!=1.5.7,<2.0,>=1.5.6 in /usr/local/lib/python3.10/dist-packages (from urllib3[socks]<3,>=1.26->selenium) (1.7.1)\n",
            "Collecting h11<1,>=0.9.0 (from wsproto>=0.14->trio-websocket~=0.9->selenium)\n",
            "  Downloading h11-0.14.0-py3-none-any.whl (58 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m58.3/58.3 kB\u001b[0m \u001b[31m8.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: outcome, h11, async-generator, wsproto, trio, trio-websocket, selenium\n",
            "Successfully installed async-generator-1.10 h11-0.14.0 outcome-1.2.0 selenium-4.10.0 trio-0.22.0 trio-websocket-0.10.3 wsproto-1.2.0\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m8.9/8.9 MB\u001b[0m \u001b[31m54.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m164.8/164.8 kB\u001b[0m \u001b[31m17.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m184.3/184.3 kB\u001b[0m \u001b[31m17.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.8/4.8 MB\u001b[0m \u001b[31m76.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m82.1/82.1 kB\u001b[0m \u001b[31m7.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.7/62.7 kB\u001b[0m \u001b[31m6.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Building wheel for validators (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Building wheel for pyngrok (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting graphics.py\n",
            "  Downloading graphics.py-5.0.1.post1.tar.gz (9.6 kB)\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Building wheels for collected packages: graphics.py\n",
            "  Building wheel for graphics.py (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for graphics.py: filename=graphics.py-5.0.1.post1-py3-none-any.whl size=10055 sha256=3332c71cab2e6a6d3c800137c9a326a68b96437021190221f1c81c284c467b09\n",
            "  Stored in directory: /root/.cache/pip/wheels/c1/82/52/78626bbacaef8177c7b71d404e4f3ecd9796770ea9cfbf4de5\n",
            "Successfully built graphics.py\n",
            "Installing collected packages: graphics.py\n",
            "Successfully installed graphics.py-5.0.1.post1\n"
          ]
        }
      ],
      "source": [
        "%pip install nest_asyncio\n",
        "%pip install yfinance --upgrade --no-cache-dir \n",
        "%pip install pandas\n",
        "%pip install bs4\n",
        "%pip install requests \n",
        "%pip install selenium\n",
        "#%pip install sklearn\n",
        "%pip install streamlit --quiet\n",
        "%pip install pyngrok==4.1.1 --quiet\n",
        "%pip install graphics.py"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r_NjgbKja2Ex",
        "outputId": "235335df-1221-4c2a-8ff0-d154d100a1ad"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.2.2)\n",
            "Requirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.22.4)\n",
            "Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.10.1)\n",
            "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.2.0)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.1.0)\n"
          ]
        }
      ],
      "source": [
        "%pip install scikit-learn"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "786JqvVa7zKi"
      },
      "outputs": [],
      "source": [
        "import re \n",
        "import json\n",
        "import csv \n",
        "import time \n",
        "from bs4 import BeautifulSoup\n",
        "from io import StringIO\n",
        "import requests\n",
        "import os\n",
        "import pandas as pd \n",
        "import nest_asyncio\n",
        "import yfinance as yf\n",
        "from datetime import datetime\n",
        "import lxml\n",
        "from lxml import html\n",
        "import numpy as np\n",
        "import sklearn\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "import streamlit as st"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "zoqpIHfA-FN4"
      },
      "outputs": [],
      "source": [
        "from pyngrok import ngrok\n",
        "from google.colab import drive"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3v1IA6oj0ki2",
        "outputId": "5479a5a0-367e-494a-ccbf-18c91513b9cf"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Writing my_app.py\n"
          ]
        }
      ],
      "source": [
        "%%writefile my_app.py"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "_7DI4ZxN6Uez"
      },
      "outputs": [],
      "source": [
        "#headers = {\"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/109.0\"}\n",
        "#url = \"https://finance.yahoo.com/quote/ATAI\"\n",
        "#r = requests.get(url)\n",
        "\n",
        "#print(r.status_code)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xbkODPrxuDJi",
        "outputId": "4e48854b-8ba7-444e-d302-e8d2f3a6254e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['MercadoLibre, Inc. (MELI)']"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "symbol = 'MELI'\n",
        "\n",
        "url = 'https://finance.yahoo.com/quote/' + symbol + '/balance-sheet?p=' + symbol\n",
        "headers = {\n",
        "    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3',\n",
        "    'Accept-Encoding': 'gzip, deflate, br',\n",
        "    'Accept-Language': 'en-US,en;q=0.9',\n",
        "    'Cache-Control': 'max-age=0',\n",
        "    'Connection': 'close',\n",
        "    'DNT': '1', # Do Not Track Request Header \n",
        "    'Pragma': 'no-cache',\n",
        "    'Referrer': 'https://google.com',\n",
        "    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36'\n",
        "}\n",
        "page = requests.get(url, headers = headers)\n",
        "tree = html.fromstring(page.content)\n",
        "tree.xpath(\"//h1/text()\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 551
        },
        "id": "5Dt98mQOExp-",
        "outputId": "3e7669c5-8a6a-4d9d-c308-6aac07d85b9f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                          0           1           2  \\\n",
              "0                                 Breakdown  12/31/2022  12/31/2021   \n",
              "1                              Total Assets  13,736,000  10,101,158   \n",
              "2   Total Liabilities Net Minority Interest  11,909,000   8,569,467   \n",
              "3      Total Equity Gross Minority Interest   1,827,000   1,531,691   \n",
              "4                      Total Capitalization   4,454,000   3,764,946   \n",
              "5                    Preferred Stock Equity         NaN         NaN   \n",
              "6                       Common Stock Equity   1,827,000   1,531,691   \n",
              "7                 Capital Lease Obligations     656,000     463,957   \n",
              "8                       Net Tangible Assets   1,649,000   1,338,474   \n",
              "9                           Working Capital   2,391,000   2,338,277   \n",
              "10                         Invested Capital   6,585,000   5,050,362   \n",
              "11                      Tangible Book Value   1,649,000   1,338,474   \n",
              "12                               Total Debt   5,414,000   3,982,628   \n",
              "13                                 Net Debt   2,848,000     934,085   \n",
              "14                             Share Issued      50,258      50,419   \n",
              "15                   Ordinary Shares Number      50,258      50,419   \n",
              "\n",
              "             3           4  \n",
              "0   12/31/2020  12/31/2019  \n",
              "1    6,526,332   4,781,691  \n",
              "2    4,874,754   2,699,728  \n",
              "3    1,651,578   2,081,963  \n",
              "4    2,512,454   2,713,316  \n",
              "5          NaN      98,843  \n",
              "6    1,651,578   1,983,120  \n",
              "7      298,847     199,932  \n",
              "8    1,552,212   1,980,079  \n",
              "9    1,710,927   2,036,536  \n",
              "10   3,060,847   2,800,611  \n",
              "11   1,552,212   1,881,236  \n",
              "12   1,708,116   1,017,423  \n",
              "13         NaN         NaN  \n",
              "14      49,870      49,710  \n",
              "15      49,870      49,710  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f0a82da9-ee1c-4545-9e8e-6126b59256df\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Breakdown</td>\n",
              "      <td>12/31/2022</td>\n",
              "      <td>12/31/2021</td>\n",
              "      <td>12/31/2020</td>\n",
              "      <td>12/31/2019</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Total Assets</td>\n",
              "      <td>13,736,000</td>\n",
              "      <td>10,101,158</td>\n",
              "      <td>6,526,332</td>\n",
              "      <td>4,781,691</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Total Liabilities Net Minority Interest</td>\n",
              "      <td>11,909,000</td>\n",
              "      <td>8,569,467</td>\n",
              "      <td>4,874,754</td>\n",
              "      <td>2,699,728</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Total Equity Gross Minority Interest</td>\n",
              "      <td>1,827,000</td>\n",
              "      <td>1,531,691</td>\n",
              "      <td>1,651,578</td>\n",
              "      <td>2,081,963</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Total Capitalization</td>\n",
              "      <td>4,454,000</td>\n",
              "      <td>3,764,946</td>\n",
              "      <td>2,512,454</td>\n",
              "      <td>2,713,316</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Preferred Stock Equity</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>98,843</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Common Stock Equity</td>\n",
              "      <td>1,827,000</td>\n",
              "      <td>1,531,691</td>\n",
              "      <td>1,651,578</td>\n",
              "      <td>1,983,120</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Capital Lease Obligations</td>\n",
              "      <td>656,000</td>\n",
              "      <td>463,957</td>\n",
              "      <td>298,847</td>\n",
              "      <td>199,932</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Net Tangible Assets</td>\n",
              "      <td>1,649,000</td>\n",
              "      <td>1,338,474</td>\n",
              "      <td>1,552,212</td>\n",
              "      <td>1,980,079</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Working Capital</td>\n",
              "      <td>2,391,000</td>\n",
              "      <td>2,338,277</td>\n",
              "      <td>1,710,927</td>\n",
              "      <td>2,036,536</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Invested Capital</td>\n",
              "      <td>6,585,000</td>\n",
              "      <td>5,050,362</td>\n",
              "      <td>3,060,847</td>\n",
              "      <td>2,800,611</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Tangible Book Value</td>\n",
              "      <td>1,649,000</td>\n",
              "      <td>1,338,474</td>\n",
              "      <td>1,552,212</td>\n",
              "      <td>1,881,236</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Total Debt</td>\n",
              "      <td>5,414,000</td>\n",
              "      <td>3,982,628</td>\n",
              "      <td>1,708,116</td>\n",
              "      <td>1,017,423</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Net Debt</td>\n",
              "      <td>2,848,000</td>\n",
              "      <td>934,085</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Share Issued</td>\n",
              "      <td>50,258</td>\n",
              "      <td>50,419</td>\n",
              "      <td>49,870</td>\n",
              "      <td>49,710</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Ordinary Shares Number</td>\n",
              "      <td>50,258</td>\n",
              "      <td>50,419</td>\n",
              "      <td>49,870</td>\n",
              "      <td>49,710</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f0a82da9-ee1c-4545-9e8e-6126b59256df')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f0a82da9-ee1c-4545-9e8e-6126b59256df button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f0a82da9-ee1c-4545-9e8e-6126b59256df');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "table_rows = tree.xpath(\"//div[contains(@class, 'D(tbr)')]\")\n",
        "\n",
        "assert len(table_rows) > 0\n",
        "\n",
        "parsed_rows = []\n",
        "\n",
        "for table_row in table_rows:\n",
        "    parsed_row = []\n",
        "    el = table_row.xpath(\"./div\")\n",
        "    \n",
        "    none_count = 0\n",
        "    \n",
        "    for rs in el:\n",
        "        try:\n",
        "            (text,) = rs.xpath('.//span/text()[1]')\n",
        "            parsed_row.append(text)\n",
        "        except ValueError:\n",
        "            parsed_row.append(np.NaN)\n",
        "            none_count += 1\n",
        "\n",
        "    if (none_count < 4):\n",
        "        parsed_rows.append(parsed_row)\n",
        "\n",
        "df = pd.DataFrame(parsed_rows)\n",
        "df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 345
        },
        "id": "_prIcNGjKvno",
        "outputId": "9865b5f4-c461-4dd4-fe32-e490023bec0f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-9-52cb85fef050>:8: FutureWarning: DataFrame.set_axis 'inplace' keyword is deprecated and will be removed in a future version. Use `obj = obj.set_axis(..., copy=False)` instead\n",
            "  df = df.set_axis(cols, axis='columns', inplace=False)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         Date Total Assets Total Liabilities Net Minority Interest  \\\n",
              "1  12/31/2022   13,736,000                              11,909,000   \n",
              "2  12/31/2021   10,101,158                               8,569,467   \n",
              "3  12/31/2020    6,526,332                               4,874,754   \n",
              "4  12/31/2019    4,781,691                               2,699,728   \n",
              "\n",
              "  Total Equity Gross Minority Interest Total Capitalization  \\\n",
              "1                            1,827,000            4,454,000   \n",
              "2                            1,531,691            3,764,946   \n",
              "3                            1,651,578            2,512,454   \n",
              "4                            2,081,963            2,713,316   \n",
              "\n",
              "  Preferred Stock Equity Common Stock Equity Capital Lease Obligations  \\\n",
              "1                    NaN           1,827,000                   656,000   \n",
              "2                    NaN           1,531,691                   463,957   \n",
              "3                    NaN           1,651,578                   298,847   \n",
              "4                 98,843           1,983,120                   199,932   \n",
              "\n",
              "  Net Tangible Assets Working Capital Invested Capital Tangible Book Value  \\\n",
              "1           1,649,000       2,391,000        6,585,000           1,649,000   \n",
              "2           1,338,474       2,338,277        5,050,362           1,338,474   \n",
              "3           1,552,212       1,710,927        3,060,847           1,552,212   \n",
              "4           1,980,079       2,036,536        2,800,611           1,881,236   \n",
              "\n",
              "  Total Debt   Net Debt Share Issued Ordinary Shares Number  \n",
              "1  5,414,000  2,848,000       50,258                 50,258  \n",
              "2  3,982,628    934,085       50,419                 50,419  \n",
              "3  1,708,116        NaN       49,870                 49,870  \n",
              "4  1,017,423        NaN       49,710                 49,710  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fca45b2c-b862-4adc-9721-59cff2e85609\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Total Assets</th>\n",
              "      <th>Total Liabilities Net Minority Interest</th>\n",
              "      <th>Total Equity Gross Minority Interest</th>\n",
              "      <th>Total Capitalization</th>\n",
              "      <th>Preferred Stock Equity</th>\n",
              "      <th>Common Stock Equity</th>\n",
              "      <th>Capital Lease Obligations</th>\n",
              "      <th>Net Tangible Assets</th>\n",
              "      <th>Working Capital</th>\n",
              "      <th>Invested Capital</th>\n",
              "      <th>Tangible Book Value</th>\n",
              "      <th>Total Debt</th>\n",
              "      <th>Net Debt</th>\n",
              "      <th>Share Issued</th>\n",
              "      <th>Ordinary Shares Number</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>12/31/2022</td>\n",
              "      <td>13,736,000</td>\n",
              "      <td>11,909,000</td>\n",
              "      <td>1,827,000</td>\n",
              "      <td>4,454,000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1,827,000</td>\n",
              "      <td>656,000</td>\n",
              "      <td>1,649,000</td>\n",
              "      <td>2,391,000</td>\n",
              "      <td>6,585,000</td>\n",
              "      <td>1,649,000</td>\n",
              "      <td>5,414,000</td>\n",
              "      <td>2,848,000</td>\n",
              "      <td>50,258</td>\n",
              "      <td>50,258</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>12/31/2021</td>\n",
              "      <td>10,101,158</td>\n",
              "      <td>8,569,467</td>\n",
              "      <td>1,531,691</td>\n",
              "      <td>3,764,946</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1,531,691</td>\n",
              "      <td>463,957</td>\n",
              "      <td>1,338,474</td>\n",
              "      <td>2,338,277</td>\n",
              "      <td>5,050,362</td>\n",
              "      <td>1,338,474</td>\n",
              "      <td>3,982,628</td>\n",
              "      <td>934,085</td>\n",
              "      <td>50,419</td>\n",
              "      <td>50,419</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>12/31/2020</td>\n",
              "      <td>6,526,332</td>\n",
              "      <td>4,874,754</td>\n",
              "      <td>1,651,578</td>\n",
              "      <td>2,512,454</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1,651,578</td>\n",
              "      <td>298,847</td>\n",
              "      <td>1,552,212</td>\n",
              "      <td>1,710,927</td>\n",
              "      <td>3,060,847</td>\n",
              "      <td>1,552,212</td>\n",
              "      <td>1,708,116</td>\n",
              "      <td>NaN</td>\n",
              "      <td>49,870</td>\n",
              "      <td>49,870</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>12/31/2019</td>\n",
              "      <td>4,781,691</td>\n",
              "      <td>2,699,728</td>\n",
              "      <td>2,081,963</td>\n",
              "      <td>2,713,316</td>\n",
              "      <td>98,843</td>\n",
              "      <td>1,983,120</td>\n",
              "      <td>199,932</td>\n",
              "      <td>1,980,079</td>\n",
              "      <td>2,036,536</td>\n",
              "      <td>2,800,611</td>\n",
              "      <td>1,881,236</td>\n",
              "      <td>1,017,423</td>\n",
              "      <td>NaN</td>\n",
              "      <td>49,710</td>\n",
              "      <td>49,710</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fca45b2c-b862-4adc-9721-59cff2e85609')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-fca45b2c-b862-4adc-9721-59cff2e85609 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-fca45b2c-b862-4adc-9721-59cff2e85609');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ],
      "source": [
        "df = pd.DataFrame(parsed_rows)\n",
        "df = df.set_index(0) # Set the index to the first column: 'Period Ending'.\n",
        "df = df.transpose() # Transpose the DataFrame, so that our header contains the account names\n",
        "\n",
        "# Rename the \"Breakdown\" column to \"Date\"\n",
        "cols = list(df.columns)\n",
        "cols[0] = 'Date'\n",
        "df = df.set_axis(cols, axis='columns', inplace=False)\n",
        "\n",
        "df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "id": "dsEu1HzbKzRL",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "de45cee3-2c48-4ce3-bca8-f885ce6d39e0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Date                                       object\n",
              "Total Assets                               object\n",
              "Total Liabilities Net Minority Interest    object\n",
              "Total Equity Gross Minority Interest       object\n",
              "Total Capitalization                       object\n",
              "Preferred Stock Equity                     object\n",
              "Common Stock Equity                        object\n",
              "Capital Lease Obligations                  object\n",
              "Net Tangible Assets                        object\n",
              "Working Capital                            object\n",
              "Invested Capital                           object\n",
              "Tangible Book Value                        object\n",
              "Total Debt                                 object\n",
              "Net Debt                                   object\n",
              "Share Issued                               object\n",
              "Ordinary Shares Number                     object\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ],
      "source": [
        "df.dtypes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "GMFgcTvuK7vi",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "95242628-e093-400d-c7aa-7cf249e98f14"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Date                                        object\n",
              "Total Assets                               float64\n",
              "Total Liabilities Net Minority Interest    float64\n",
              "Total Equity Gross Minority Interest       float64\n",
              "Total Capitalization                       float64\n",
              "Preferred Stock Equity                     float64\n",
              "Common Stock Equity                        float64\n",
              "Capital Lease Obligations                  float64\n",
              "Net Tangible Assets                        float64\n",
              "Working Capital                            float64\n",
              "Invested Capital                           float64\n",
              "Tangible Book Value                        float64\n",
              "Total Debt                                 float64\n",
              "Net Debt                                   float64\n",
              "Share Issued                               float64\n",
              "Ordinary Shares Number                     float64\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ],
      "source": [
        "numeric_columns = list(df.columns)[1::] # Take all columns, except the first (which is the 'Date' column)\n",
        "\n",
        "for column_name in numeric_columns:\n",
        "    df[column_name] = df[column_name].str.replace(',', '') # Remove the thousands separator\n",
        "    df[column_name] = df[column_name].astype(np.float64) # Convert the column to float64\n",
        "\n",
        "df.dtypes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "id": "tUtMTXNEK81V"
      },
      "outputs": [],
      "source": [
        "# FINANCIAL SCRAPING FORMULAS #\n",
        "def get_page(url):\n",
        "    # Set up the request headers that we're going to use, to simulate\n",
        "    # a request by the Chrome browser. Simulating a request from a browser\n",
        "    # is generally good practice when building a scraper\n",
        "    headers = {\n",
        "        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3',\n",
        "        'Accept-Encoding': 'gzip, deflate, br',\n",
        "        'Accept-Language': 'en-US,en;q=0.9',\n",
        "        'Cache-Control': 'max-age=0',\n",
        "        'Connection': 'close',\n",
        "        'DNT': '1', # Do Not Track Request Header \n",
        "        'Pragma': 'no-cache',\n",
        "        'Referrer': 'https://google.com',\n",
        "        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36'\n",
        "    }\n",
        "\n",
        "    return requests.get(url, headers=headers)\n",
        "\n",
        "def parse_rows(table_rows):\n",
        "    parsed_rows = []\n",
        "\n",
        "    for table_row in table_rows:\n",
        "        parsed_row = []\n",
        "        el = table_row.xpath(\"./div\")\n",
        "\n",
        "        none_count = 0\n",
        "\n",
        "        for rs in el:\n",
        "            try:\n",
        "                (text,) = rs.xpath('.//span/text()[1]')\n",
        "                parsed_row.append(text)\n",
        "            except ValueError:\n",
        "                parsed_row.append(np.NaN)\n",
        "                none_count += 1\n",
        "\n",
        "        if (none_count < 4):\n",
        "            parsed_rows.append(parsed_row)\n",
        "            \n",
        "    return pd.DataFrame(parsed_rows)\n",
        "\n",
        "def clean_data(df):\n",
        "    df = df.set_index(0) # Set the index to the first column: 'Period Ending'.\n",
        "    df = df.transpose() # Transpose the DataFrame, so that our header contains the account names\n",
        "    \n",
        "    # Rename the \"Breakdown\" column to \"Date\"\n",
        "    cols = list(df.columns)\n",
        "    cols[0] = 'Date'\n",
        "    df = df.set_axis(cols, axis='columns', inplace=False)\n",
        "    \n",
        "    numeric_columns = list(df.columns)[1::] # Take all columns, except the first (which is the 'Date' column)\n",
        "\n",
        "    for column_index in range(1, len(df.columns)): # Take all columns, except the first (which is the 'Date' column)\n",
        "        df.iloc[:,column_index] = df.iloc[:,column_index].str.replace(',', '') # Remove the thousands separator\n",
        "        df.iloc[:,column_index] = df.iloc[:,column_index].astype(np.float64) # Convert the column to float64\n",
        "        \n",
        "    return df\n",
        "\n",
        "def scrape_table(url):\n",
        "    # Fetch the page that we're going to parse\n",
        "    page = get_page(url);\n",
        "\n",
        "    # Parse the page with LXML, so that we can start doing some XPATH queries\n",
        "    # to extract the data that we want\n",
        "    tree = html.fromstring(page.content)\n",
        "\n",
        "    # Fetch all div elements which have class 'D(tbr)'\n",
        "    table_rows = tree.xpath(\"//div[contains(@class, 'D(tbr)')]\")\n",
        "    \n",
        "    # Ensure that some table rows are found; if none are found, then it's possible\n",
        "    # that Yahoo Finance has changed their page layout, or have detected\n",
        "    # that you're scraping the page.\n",
        "    assert len(table_rows) > 0\n",
        "    \n",
        "    df = parse_rows(table_rows)\n",
        "    df = clean_data(df)\n",
        "        \n",
        "    return df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "ndhdNfkWS4a3"
      },
      "outputs": [],
      "source": [
        "#symbol = \"MELI\"\n",
        "#scrape_table('https://finance.yahoo.com/quote/' + symbol + 'key-statistics?p=' + symbol)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "id": "opZvY5CI9t_6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 382
        },
        "outputId": "094dd3da-c7b0-40e2-b503-a80d94bb1ae0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-12-9f93fae13403>:49: FutureWarning: DataFrame.set_axis 'inplace' keyword is deprecated and will be removed in a future version. Use `obj = obj.set_axis(..., copy=False)` instead\n",
            "  df = df.set_axis(cols, axis='columns', inplace=False)\n",
            "<ipython-input-12-9f93fae13403>:55: DeprecationWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`\n",
            "  df.iloc[:,column_index] = df.iloc[:,column_index].astype(np.float64) # Convert the column to float64\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         Date  Total Assets  Total Liabilities Net Minority Interest  \\\n",
              "1  12/31/2022    13736000.0                               11909000.0   \n",
              "2  12/31/2021    10101158.0                                8569467.0   \n",
              "3  12/31/2020     6526332.0                                4874754.0   \n",
              "4  12/31/2019     4781691.0                                2699728.0   \n",
              "\n",
              "   Total Equity Gross Minority Interest  Total Capitalization  \\\n",
              "1                             1827000.0             4454000.0   \n",
              "2                             1531691.0             3764946.0   \n",
              "3                             1651578.0             2512454.0   \n",
              "4                             2081963.0             2713316.0   \n",
              "\n",
              "   Preferred Stock Equity  Common Stock Equity  Capital Lease Obligations  \\\n",
              "1                     NaN            1827000.0                   656000.0   \n",
              "2                     NaN            1531691.0                   463957.0   \n",
              "3                     NaN            1651578.0                   298847.0   \n",
              "4                 98843.0            1983120.0                   199932.0   \n",
              "\n",
              "   Net Tangible Assets  Working Capital  Invested Capital  \\\n",
              "1            1649000.0        2391000.0         6585000.0   \n",
              "2            1338474.0        2338277.0         5050362.0   \n",
              "3            1552212.0        1710927.0         3060847.0   \n",
              "4            1980079.0        2036536.0         2800611.0   \n",
              "\n",
              "   Tangible Book Value  Total Debt   Net Debt  Share Issued  \\\n",
              "1            1649000.0   5414000.0  2848000.0       50258.0   \n",
              "2            1338474.0   3982628.0   934085.0       50419.0   \n",
              "3            1552212.0   1708116.0        NaN       49870.0   \n",
              "4            1881236.0   1017423.0        NaN       49710.0   \n",
              "\n",
              "   Ordinary Shares Number  \n",
              "1                 50258.0  \n",
              "2                 50419.0  \n",
              "3                 49870.0  \n",
              "4                 49710.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3cd3b1f2-b355-4fe0-a1e7-0cac4e1fcfa0\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Total Assets</th>\n",
              "      <th>Total Liabilities Net Minority Interest</th>\n",
              "      <th>Total Equity Gross Minority Interest</th>\n",
              "      <th>Total Capitalization</th>\n",
              "      <th>Preferred Stock Equity</th>\n",
              "      <th>Common Stock Equity</th>\n",
              "      <th>Capital Lease Obligations</th>\n",
              "      <th>Net Tangible Assets</th>\n",
              "      <th>Working Capital</th>\n",
              "      <th>Invested Capital</th>\n",
              "      <th>Tangible Book Value</th>\n",
              "      <th>Total Debt</th>\n",
              "      <th>Net Debt</th>\n",
              "      <th>Share Issued</th>\n",
              "      <th>Ordinary Shares Number</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>12/31/2022</td>\n",
              "      <td>13736000.0</td>\n",
              "      <td>11909000.0</td>\n",
              "      <td>1827000.0</td>\n",
              "      <td>4454000.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1827000.0</td>\n",
              "      <td>656000.0</td>\n",
              "      <td>1649000.0</td>\n",
              "      <td>2391000.0</td>\n",
              "      <td>6585000.0</td>\n",
              "      <td>1649000.0</td>\n",
              "      <td>5414000.0</td>\n",
              "      <td>2848000.0</td>\n",
              "      <td>50258.0</td>\n",
              "      <td>50258.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>12/31/2021</td>\n",
              "      <td>10101158.0</td>\n",
              "      <td>8569467.0</td>\n",
              "      <td>1531691.0</td>\n",
              "      <td>3764946.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1531691.0</td>\n",
              "      <td>463957.0</td>\n",
              "      <td>1338474.0</td>\n",
              "      <td>2338277.0</td>\n",
              "      <td>5050362.0</td>\n",
              "      <td>1338474.0</td>\n",
              "      <td>3982628.0</td>\n",
              "      <td>934085.0</td>\n",
              "      <td>50419.0</td>\n",
              "      <td>50419.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>12/31/2020</td>\n",
              "      <td>6526332.0</td>\n",
              "      <td>4874754.0</td>\n",
              "      <td>1651578.0</td>\n",
              "      <td>2512454.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1651578.0</td>\n",
              "      <td>298847.0</td>\n",
              "      <td>1552212.0</td>\n",
              "      <td>1710927.0</td>\n",
              "      <td>3060847.0</td>\n",
              "      <td>1552212.0</td>\n",
              "      <td>1708116.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>49870.0</td>\n",
              "      <td>49870.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>12/31/2019</td>\n",
              "      <td>4781691.0</td>\n",
              "      <td>2699728.0</td>\n",
              "      <td>2081963.0</td>\n",
              "      <td>2713316.0</td>\n",
              "      <td>98843.0</td>\n",
              "      <td>1983120.0</td>\n",
              "      <td>199932.0</td>\n",
              "      <td>1980079.0</td>\n",
              "      <td>2036536.0</td>\n",
              "      <td>2800611.0</td>\n",
              "      <td>1881236.0</td>\n",
              "      <td>1017423.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>49710.0</td>\n",
              "      <td>49710.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3cd3b1f2-b355-4fe0-a1e7-0cac4e1fcfa0')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3cd3b1f2-b355-4fe0-a1e7-0cac4e1fcfa0 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3cd3b1f2-b355-4fe0-a1e7-0cac4e1fcfa0');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ],
      "source": [
        "#symbol = 'MELI'\n",
        "df_balance_sheet = scrape_table('https://finance.yahoo.com/quote/' + symbol + '/balance-sheet?p=' + symbol)\n",
        "df_balance_sheet"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "urxssPE4LNZI",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 477
        },
        "outputId": "fbe6ca9c-469d-4aeb-84d3-a890030fbadb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-12-9f93fae13403>:49: FutureWarning: DataFrame.set_axis 'inplace' keyword is deprecated and will be removed in a future version. Use `obj = obj.set_axis(..., copy=False)` instead\n",
            "  df = df.set_axis(cols, axis='columns', inplace=False)\n",
            "<ipython-input-12-9f93fae13403>:55: DeprecationWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`\n",
            "  df.iloc[:,column_index] = df.iloc[:,column_index].astype(np.float64) # Convert the column to float64\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         Date  Total Revenue  Cost of Revenue  Gross Profit  \\\n",
              "1         ttm     10537000.0        5374000.0     5163000.0   \n",
              "2  12/31/2022     10537000.0        5374000.0     5163000.0   \n",
              "3  12/31/2021      7069409.0        4064357.0     3005052.0   \n",
              "4  12/31/2020      3973465.0        2264255.0     1709210.0   \n",
              "5  12/31/2019      2296314.0        1194191.0     1102123.0   \n",
              "\n",
              "   Operating Expense  Operating Income  \\\n",
              "1          4129000.0         1034000.0   \n",
              "2          4129000.0         1034000.0   \n",
              "3          2564349.0          440703.0   \n",
              "4          1581518.0          127692.0   \n",
              "5          1255284.0         -153161.0   \n",
              "\n",
              "   Net Non Operating Interest Income Expense  Other Income Expense  \\\n",
              "1                                   -56000.0             -198000.0   \n",
              "2                                   -56000.0             -198000.0   \n",
              "3                                   -90742.0             -109333.0   \n",
              "4                                    -3923.0              -42454.0   \n",
              "5                                    47647.0               -1732.0   \n",
              "\n",
              "   Pretax Income  Tax Provision  ...  Net Interest Income       EBIT  \\\n",
              "1       780000.0       298000.0  ...             -56000.0  1101000.0   \n",
              "2       780000.0       298000.0  ...             -56000.0  1101000.0   \n",
              "3       240628.0       148802.0  ...             -90742.0   469332.0   \n",
              "4        81315.0        82022.0  ...              -3923.0   188005.0   \n",
              "5      -107246.0        64753.0  ...              47647.0   -41370.0   \n",
              "\n",
              "   Reconciled Cost of Revenue  Reconciled Depreciation  \\\n",
              "1                   5374000.0                 403000.0   \n",
              "2                   5374000.0                 403000.0   \n",
              "3                   4064357.0                 203942.0   \n",
              "4                   2264255.0                 104992.0   \n",
              "5                   1194191.0                  73320.0   \n",
              "\n",
              "   Net Income from Continuing Operation Net Minority Interest  \\\n",
              "1                                           482000.0            \n",
              "2                                           482000.0            \n",
              "3                                            83304.0            \n",
              "4                                             -707.0            \n",
              "5                                          -171999.0            \n",
              "\n",
              "   Total Unusual Items Excluding Goodwill  Total Unusual Items  \\\n",
              "1                               -198000.0            -198000.0   \n",
              "2                               -198000.0            -198000.0   \n",
              "3                               -109333.0            -109333.0   \n",
              "4                                -42454.0             -42454.0   \n",
              "5                                 -1732.0              -1732.0   \n",
              "\n",
              "   Normalized EBITDA  Tax Rate for Calcs  Tax Effect of Unusual Items  \n",
              "1          1702000.0                 0.0                    -75636.00  \n",
              "2          1702000.0                 0.0                    -75646.00  \n",
              "3           782607.0                 0.0                    -37173.00  \n",
              "4           335451.0                 0.0                    -14434.00  \n",
              "5            33682.0                 0.0                      -588.88  \n",
              "\n",
              "[5 rows x 31 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-afe1fc13-55ec-4116-bb77-d15b0cec8bba\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Total Revenue</th>\n",
              "      <th>Cost of Revenue</th>\n",
              "      <th>Gross Profit</th>\n",
              "      <th>Operating Expense</th>\n",
              "      <th>Operating Income</th>\n",
              "      <th>Net Non Operating Interest Income Expense</th>\n",
              "      <th>Other Income Expense</th>\n",
              "      <th>Pretax Income</th>\n",
              "      <th>Tax Provision</th>\n",
              "      <th>...</th>\n",
              "      <th>Net Interest Income</th>\n",
              "      <th>EBIT</th>\n",
              "      <th>Reconciled Cost of Revenue</th>\n",
              "      <th>Reconciled Depreciation</th>\n",
              "      <th>Net Income from Continuing Operation Net Minority Interest</th>\n",
              "      <th>Total Unusual Items Excluding Goodwill</th>\n",
              "      <th>Total Unusual Items</th>\n",
              "      <th>Normalized EBITDA</th>\n",
              "      <th>Tax Rate for Calcs</th>\n",
              "      <th>Tax Effect of Unusual Items</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ttm</td>\n",
              "      <td>10537000.0</td>\n",
              "      <td>5374000.0</td>\n",
              "      <td>5163000.0</td>\n",
              "      <td>4129000.0</td>\n",
              "      <td>1034000.0</td>\n",
              "      <td>-56000.0</td>\n",
              "      <td>-198000.0</td>\n",
              "      <td>780000.0</td>\n",
              "      <td>298000.0</td>\n",
              "      <td>...</td>\n",
              "      <td>-56000.0</td>\n",
              "      <td>1101000.0</td>\n",
              "      <td>5374000.0</td>\n",
              "      <td>403000.0</td>\n",
              "      <td>482000.0</td>\n",
              "      <td>-198000.0</td>\n",
              "      <td>-198000.0</td>\n",
              "      <td>1702000.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-75636.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>12/31/2022</td>\n",
              "      <td>10537000.0</td>\n",
              "      <td>5374000.0</td>\n",
              "      <td>5163000.0</td>\n",
              "      <td>4129000.0</td>\n",
              "      <td>1034000.0</td>\n",
              "      <td>-56000.0</td>\n",
              "      <td>-198000.0</td>\n",
              "      <td>780000.0</td>\n",
              "      <td>298000.0</td>\n",
              "      <td>...</td>\n",
              "      <td>-56000.0</td>\n",
              "      <td>1101000.0</td>\n",
              "      <td>5374000.0</td>\n",
              "      <td>403000.0</td>\n",
              "      <td>482000.0</td>\n",
              "      <td>-198000.0</td>\n",
              "      <td>-198000.0</td>\n",
              "      <td>1702000.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-75646.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>12/31/2021</td>\n",
              "      <td>7069409.0</td>\n",
              "      <td>4064357.0</td>\n",
              "      <td>3005052.0</td>\n",
              "      <td>2564349.0</td>\n",
              "      <td>440703.0</td>\n",
              "      <td>-90742.0</td>\n",
              "      <td>-109333.0</td>\n",
              "      <td>240628.0</td>\n",
              "      <td>148802.0</td>\n",
              "      <td>...</td>\n",
              "      <td>-90742.0</td>\n",
              "      <td>469332.0</td>\n",
              "      <td>4064357.0</td>\n",
              "      <td>203942.0</td>\n",
              "      <td>83304.0</td>\n",
              "      <td>-109333.0</td>\n",
              "      <td>-109333.0</td>\n",
              "      <td>782607.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-37173.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>12/31/2020</td>\n",
              "      <td>3973465.0</td>\n",
              "      <td>2264255.0</td>\n",
              "      <td>1709210.0</td>\n",
              "      <td>1581518.0</td>\n",
              "      <td>127692.0</td>\n",
              "      <td>-3923.0</td>\n",
              "      <td>-42454.0</td>\n",
              "      <td>81315.0</td>\n",
              "      <td>82022.0</td>\n",
              "      <td>...</td>\n",
              "      <td>-3923.0</td>\n",
              "      <td>188005.0</td>\n",
              "      <td>2264255.0</td>\n",
              "      <td>104992.0</td>\n",
              "      <td>-707.0</td>\n",
              "      <td>-42454.0</td>\n",
              "      <td>-42454.0</td>\n",
              "      <td>335451.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-14434.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>12/31/2019</td>\n",
              "      <td>2296314.0</td>\n",
              "      <td>1194191.0</td>\n",
              "      <td>1102123.0</td>\n",
              "      <td>1255284.0</td>\n",
              "      <td>-153161.0</td>\n",
              "      <td>47647.0</td>\n",
              "      <td>-1732.0</td>\n",
              "      <td>-107246.0</td>\n",
              "      <td>64753.0</td>\n",
              "      <td>...</td>\n",
              "      <td>47647.0</td>\n",
              "      <td>-41370.0</td>\n",
              "      <td>1194191.0</td>\n",
              "      <td>73320.0</td>\n",
              "      <td>-171999.0</td>\n",
              "      <td>-1732.0</td>\n",
              "      <td>-1732.0</td>\n",
              "      <td>33682.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-588.88</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 31 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-afe1fc13-55ec-4116-bb77-d15b0cec8bba')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-afe1fc13-55ec-4116-bb77-d15b0cec8bba button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-afe1fc13-55ec-4116-bb77-d15b0cec8bba');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ],
      "source": [
        "scrape_table('https://finance.yahoo.com/quote/' + symbol + '/financials?p=' + symbol)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "id": "K8ZZhuzBxwVN",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5f388dc5-8dc7-46b5-9cc7-4ec806368c88"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "15728700416"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ],
      "source": [
        "#MELI = yf.Ticker('MELI')\n",
        "# MELI.get_shares_full(start=\"2022-01-01\", end=None)[-1]\n",
        "\n",
        "# Gets the most recent shares outstanding by last trading date \n",
        "yf.Ticker(\"AAPL\").get_shares_full(start=\"2022-01-01\", end=None)[-1]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "id": "RhuNDK1zxyaC"
      },
      "outputs": [],
      "source": [
        "def get_free_cashflow(symbol):\n",
        "    #cf_table = pd.read_html(f'https://finance.yahoo.com/quote/{symbol}/cash-flow?p={symbol}')[0]\n",
        "    cf_table = scrape_table('https://finance.yahoo.com/quote/' + symbol + '/cash-flow?p=' + symbol)\n",
        "    table_FCF = cf_table.iloc[[0, 1, 2, 3, 4],[0 ,-1]]\n",
        "    table_FCF2 =  table_FCF.iloc[1:, 1:]\n",
        "\n",
        "    freeCF = []\n",
        "    # Iterate over each row in the dataframe\n",
        "    for index, row in table_FCF2.iterrows():\n",
        "        # Iterate over each cell in the row and append its value to the list\n",
        "        for value in row.values:\n",
        "            freeCF.append(value)\n",
        "\n",
        "    return freeCF\n",
        "\n",
        "    "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "id": "UwVWo_6ZU3fs",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "22858130-3ecb-4c4c-c078-aec058e57274"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-12-9f93fae13403>:49: FutureWarning: DataFrame.set_axis 'inplace' keyword is deprecated and will be removed in a future version. Use `obj = obj.set_axis(..., copy=False)` instead\n",
            "  df = df.set_axis(cols, axis='columns', inplace=False)\n",
            "<ipython-input-12-9f93fae13403>:55: DeprecationWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`\n",
            "  df.iloc[:,column_index] = df.iloc[:,column_index].astype(np.float64) # Convert the column to float64\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "58896000.0"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ],
      "source": [
        "freeCF = get_free_cashflow(\"AAPL\")\n",
        "freeCF[-1]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "id": "16yt6wDOT8Qf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4d208ed5-e874-49dc-cc10-91db952e2b46"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Free Cash Flow\n",
            "2     111443000.0\n",
            "3      92953000.0\n",
            "4      73365000.0\n",
            "5      58896000.0\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-12-9f93fae13403>:49: FutureWarning: DataFrame.set_axis 'inplace' keyword is deprecated and will be removed in a future version. Use `obj = obj.set_axis(..., copy=False)` instead\n",
            "  df = df.set_axis(cols, axis='columns', inplace=False)\n",
            "<ipython-input-12-9f93fae13403>:55: DeprecationWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`\n",
            "  df.iloc[:,column_index] = df.iloc[:,column_index].astype(np.float64) # Convert the column to float64\n"
          ]
        }
      ],
      "source": [
        "symbol = \"AAPL\"\n",
        "cf_table = scrape_table('https://finance.yahoo.com/quote/' + symbol + '/cash-flow?p=' + symbol)\n",
        "table_FCF = cf_table.iloc[[0, 1, 2, 3, 4],[0 ,-1]]\n",
        "table_FCF2 =  table_FCF.iloc[1:, 1:]\n",
        "print(table_FCF2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "id": "QPHKgHTI73-4"
      },
      "outputs": [],
      "source": [
        "def get_fairvalue(symbol):\n",
        "    # Get free cash flow\n",
        "    freeCF = get_free_cashflow(symbol)\n",
        "\n",
        "    # Get outstanding shares\n",
        "    ticker = yf.Ticker(symbol)\n",
        "    outstandingshares = ticker.get_shares_full(start=\"2022-01-01\", end=None)[-1]\n",
        "    \n",
        "\n",
        "    # Assumptions:\n",
        "    required_rate = 0.07 \n",
        "    perpetual_rate = 0.02\n",
        "    cfGrowth = 0.03\n",
        "    years = [1, 2, 3, 4]\n",
        "\n",
        "    futureFCF = []\n",
        "    discountfactor = []\n",
        "    discountedFCF = []\n",
        "\n",
        "    # Terminal value calculation using Perpetuity Method \n",
        "    terminalvalue = (freeCF[0] * (1 + perpetual_rate)) / (required_rate - perpetual_rate)\n",
        "\n",
        "    # Discounting For Loop\n",
        "    for year in years:\n",
        "        futureFCF.append(freeCF[-1] * (1 + cfGrowth) ** year)\n",
        "        discountfactor.append((1 + required_rate) ** year)\n",
        "\n",
        "    for i in range(0, len(years)):\n",
        "      discountedFCF.append(futureFCF[i]/discountfactor[i])\n",
        "\n",
        "    discountedterminalvalue = terminalvalue / (1+required_rate)**4\n",
        "    discountedFCF.append(discountedterminalvalue)\n",
        "\n",
        "    todaysvalue = sum(discountedFCF)\n",
        "    # Intrinsic Value Per Share Calculation\n",
        "    fairvalue = todaysvalue*1000 / outstandingshares\n",
        "\n",
        "    return fairvalue\n",
        "    \n",
        "    print(\"The fair value is ${}\".format(round(fairvalue,2)))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "id": "bM7FCW9_nXuH",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "df4a33b7-2a20-48e2-ec06-893662541f7c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-12-9f93fae13403>:49: FutureWarning: DataFrame.set_axis 'inplace' keyword is deprecated and will be removed in a future version. Use `obj = obj.set_axis(..., copy=False)` instead\n",
            "  df = df.set_axis(cols, axis='columns', inplace=False)\n",
            "<ipython-input-12-9f93fae13403>:55: DeprecationWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`\n",
            "  df.iloc[:,column_index] = df.iloc[:,column_index].astype(np.float64) # Convert the column to float64\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "123.89891791512349"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ],
      "source": [
        "get_fairvalue(\"AAPL\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "id": "ifhGlQAu0nqE"
      },
      "outputs": [],
      "source": [
        "def get_ticker(name):\n",
        "\n",
        "    ticker = yf.Ticker(name)  \n",
        "    return ticker"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "id": "TIwGvU1W0MzM",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0e1935ac-fda7-4af8-b7da-28f5815acf9c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "2023-06-18 18:48:17.907 \n",
            "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
            "  command:\n",
            "\n",
            "    streamlit run /usr/local/lib/python3.10/dist-packages/ipykernel_launcher.py [ARGUMENTS]\n"
          ]
        }
      ],
      "source": [
        "######### MAIN BODY ##########\n",
        "st.title('Fair Value Analysis Tool')\n",
        "st.subheader(\"by Carlos Vasquez-Velasco\")\n",
        "\n",
        "# Containers help separate content. \n",
        "# Make sure to assign relevant names to distinguish containers\n",
        "description = st.container()\n",
        "description.write(\"\"\"The objective of this Webapp is to provide informative data and value-based analysis of equities for the retail investor.\"\"\")\n",
        "\n",
        "######### SIDEBAR MENU ########\n",
        "st.sidebar.header(\"Honors By Contract\")\n",
        "\n",
        "######### MAIN BODY ##########\n",
        "ticker_name = st.text_input(\"Enter ticker to analyze\")\n",
        "ticker = get_ticker(ticker_name)\n",
        "\n",
        "if len(ticker_name) >= 1: \n",
        "  projectedPrice = get_fairvalue(ticker_name)\n",
        "  "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "id": "ygDjFdFgLmZp"
      },
      "outputs": [],
      "source": [
        "######## COMPANY SUMMARY ########\n",
        "\n",
        "# detailed summary on Ticker\n",
        "if st.checkbox('Show company summary'):\n",
        "\n",
        "    st.subheader('Company summary on: ' + str(ticker.info['longName']))\n",
        "    st.write(ticker.info['longBusinessSummary']) \n",
        "\n",
        "######## RAW DATA DATAFRAME ########\n",
        "\n",
        "## Make options inside checkbox bubbles a dropdown menu instead of more checkbox objects.\n",
        "\n",
        "# Raw data for Ticker\n",
        "if st.checkbox('Show raw data'):\n",
        "\n",
        "    if len(ticker_name) < 1:\n",
        "        st.warning(\"Please enter a ticker to analyze\")\n",
        "\n",
        "    # fetches the Fair Value of the Stock \n",
        "    if len(ticker_name) >= 1:\n",
        "      company = get_fairvalue(ticker_name)\n",
        "\n",
        "      st.write(company)\n",
        "      \n",
        "      submitted = st.form_submit_button(\"Submit\")\n",
        "      if submitted:\n",
        "        st.success(\"Loading data!\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "id": "bdWCLvbZMuqy",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d8d715dc-79b8-4f8a-a9cf-8f42b5589c7e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-12-9f93fae13403>:49: FutureWarning: DataFrame.set_axis 'inplace' keyword is deprecated and will be removed in a future version. Use `obj = obj.set_axis(..., copy=False)` instead\n",
            "  df = df.set_axis(cols, axis='columns', inplace=False)\n",
            "<ipython-input-12-9f93fae13403>:55: DeprecationWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`\n",
            "  df.iloc[:,column_index] = df.iloc[:,column_index].astype(np.float64) # Convert the column to float64\n"
          ]
        }
      ],
      "source": [
        "# FCF VALUATION #\n",
        "\n",
        "if st.checkbox('Conduct a Free Cash Flow Valuation', symbol):\n",
        "  fcf_Valuation = get_fairvalue(symbol)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "id": "jU-ODU0dsS-A",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3fa4160a-6a33-4a4b-868d-90b80cb5d677"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Authtoken saved to configuration file: /root/.ngrok2/ngrok.yml\n"
          ]
        }
      ],
      "source": [
        "!ngrok authtoken 2POFa91LcItBpbPVBoqM1qT1xDB_Fixjv9P2Rxrmy3DR5R4Q"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "id": "KixIAdo1-W2e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d0d13a23-efdf-499f-d7c1-d581d996c16d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "nohup: appending output to 'nohup.out'\n",
            "This is the URL:  http://b041-34-125-217-197.ngrok-free.app\n"
          ]
        }
      ],
      "source": [
        "!nohup streamlit my_app.py &\n",
        "url = ngrok.connect(port = '8501')\n",
        "print(\"This is the URL: \", url)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {
        "id": "hfn8HRZm9ETp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b29277b7-aa16-48e4-be72-021cf4f8f6e5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[34m  Stopping...\u001b[0m\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/bin/streamlit\", line 8, in <module>\n",
            "    sys.exit(main())\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/click/core.py\", line 1130, in __call__\n",
            "    return self.main(*args, **kwargs)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/click/core.py\", line 1055, in main\n",
            "    rv = self.invoke(ctx)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/click/core.py\", line 1657, in invoke\n",
            "    return _process_result(sub_ctx.command.invoke(sub_ctx))\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/click/core.py\", line 1404, in invoke\n",
            "    return ctx.invoke(self.callback, **ctx.params)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/click/core.py\", line 760, in invoke\n",
            "    return __callback(*args, **kwargs)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/streamlit/web/cli.py\", line 233, in main_run\n",
            "    _main_run(target, args, flag_options=kwargs)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/streamlit/web/cli.py\", line 269, in _main_run\n",
            "    bootstrap.run(file, command_line, args, flag_options)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/streamlit/web/bootstrap.py\", line 430, in run\n",
            "    asyncio.run(run_server())\n",
            "  File \"/usr/lib/python3.10/asyncio/runners.py\", line 44, in run\n",
            "    return loop.run_until_complete(main)\n",
            "  File \"/usr/lib/python3.10/asyncio/base_events.py\", line 636, in run_until_complete\n",
            "    self.run_forever()\n",
            "  File \"/usr/lib/python3.10/asyncio/base_events.py\", line 603, in run_forever\n",
            "    self._run_once()\n",
            "  File \"/usr/lib/python3.10/asyncio/base_events.py\", line 1871, in _run_once\n",
            "    event_list = self._selector.select(timeout)\n",
            "  File \"/usr/lib/python3.10/selectors.py\", line 469, in select\n",
            "    fd_event_list = self._selector.poll(timeout, max_ev)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/streamlit/web/bootstrap.py\", line 69, in signal_handler\n",
            "    server.stop()\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/streamlit/web/server/server.py\", line 394, in stop\n",
            "    click.secho(\"  Stopping...\", fg=\"blue\")\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/click/termui.py\", line 637, in secho\n",
            "    return echo(message, file=file, nl=nl, err=err, color=color)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/click/utils.py\", line 299, in echo\n",
            "    file.write(out)  # type: ignore\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/streamlit/web/bootstrap.py\", line 69, in signal_handler\n",
            "    server.stop()\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/streamlit/web/server/server.py\", line 394, in stop\n",
            "    click.secho(\"  Stopping...\", fg=\"blue\")\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/click/termui.py\", line 637, in secho\n",
            "    return echo(message, file=file, nl=nl, err=err, color=color)\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/click/utils.py\", line 299, in echo\n",
            "    file.write(out)  # type: ignore\n",
            "RuntimeError: reentrant call inside <_io.BufferedWriter name='<stdout>'>\n"
          ]
        }
      ],
      "source": [
        "!streamlit run my_app.py"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "id": "CvseETNK-goh",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f06ef4e8-6e94-4398-fcff-3838c753f490"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: graphics.py in /usr/local/lib/python3.10/dist-packages (5.0.1.post1)\n"
          ]
        }
      ],
      "source": [
        "%pip install graphics.py"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "id": "TFhHFN-ACvfv"
      },
      "outputs": [],
      "source": [
        "def get_company_description(ticker):\n",
        "    url = f\"https://finance.yahoo.com/quote/{ticker}\"\n",
        "    headers = {\"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3\"}\n",
        "    response = requests.get(url, headers=headers)\n",
        "    if response.status_code == 200:\n",
        "        start = response.text.find('\\\"longBusinessSummary\\\":\\\"') + 24\n",
        "        end = response.text.find('\\\",\\\"city\\\"')\n",
        "        return response.text[start:end]\n",
        "    else:\n",
        "        return \"Error: Unable to retrieve company description\"\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "id": "s-Z3mLa6C1oZ"
      },
      "outputs": [],
      "source": [
        "def get_companyProfile(ticker):\n",
        "    try:\n",
        "        company = yf.Ticker(ticker)\n",
        "        info = company.info\n",
        "        return info\n",
        "    except Exception as e:\n",
        "        print(f\"An error occurred: {e}\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "id": "BArjU46L1GsB"
      },
      "outputs": [],
      "source": [
        "def userInterface():\n",
        "  \n",
        "  enterTicker = str(input(\"Enter the ticker symbol: \"))\n",
        "  profile = get_companyProfile(enterTicker)\n",
        "  companyProfile = profile['longBusinessSummary']\n",
        "  analysisResult = get_fairvalue(enterTicker)\n",
        "  print(enterTicker, companyProfile)\n",
        "  print(\"The fair value of\", enterTicker, \" is: \", analysisResult)\n",
        "  \n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {
        "id": "MXFDT047EQAz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c03aa1db-54b1-4cd6-8455-565ad0a2f5bf"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Enter the ticker symbol: aapl\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-12-9f93fae13403>:49: FutureWarning: DataFrame.set_axis 'inplace' keyword is deprecated and will be removed in a future version. Use `obj = obj.set_axis(..., copy=False)` instead\n",
            "  df = df.set_axis(cols, axis='columns', inplace=False)\n",
            "<ipython-input-12-9f93fae13403>:55: DeprecationWarning: In a future version, `df.iloc[:, i] = newvals` will attempt to set the values inplace instead of always setting a new array. To retain the old behavior, use either `df[df.columns[i]] = newvals` or, if columns are non-unique, `df.isetitem(i, newvals)`\n",
            "  df.iloc[:,column_index] = df.iloc[:,column_index].astype(np.float64) # Convert the column to float64\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "aapl Apple Inc. designs, manufactures, and markets smartphones, personal computers, tablets, wearables, and accessories worldwide. The company offers iPhone, a line of smartphones; Mac, a line of personal computers; iPad, a line of multi-purpose tablets; and wearables, home, and accessories comprising AirPods, Apple TV, Apple Watch, Beats products, and HomePod. It also provides AppleCare support and cloud services; and operates various platforms, including the App Store that allow customers to discover and download applications and digital content, such as books, music, video, games, and podcasts. In addition, the company offers various services, such as Apple Arcade, a game subscription service; Apple Fitness+, a personalized fitness service; Apple Music, which offers users a curated listening experience with on-demand radio stations; Apple News+, a subscription news and magazine service; Apple TV+, which offers exclusive original content; Apple Card, a co-branded credit card; and Apple Pay, a cashless payment service, as well as licenses its intellectual property. The company serves consumers, and small and mid-sized businesses; and the education, enterprise, and government markets. It distributes third-party applications for its products through the App Store. The company also sells its products through its retail and online stores, and direct sales force; and third-party cellular network carriers, wholesalers, retailers, and resellers. Apple Inc. was incorporated in 1977 and is headquartered in Cupertino, California.\n",
            "The fair value of aapl  is:  123.89891791512349\n"
          ]
        }
      ],
      "source": [
        "userInterface()"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}